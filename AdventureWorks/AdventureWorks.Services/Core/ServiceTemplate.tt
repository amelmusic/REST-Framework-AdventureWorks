<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ include file="VisualStudioHelper.ttinclude" #>
<#@ include file="ServiceTemplate.Config.ttinclude" #>
<#@ include file="EFBasedServiceTemplate.ttinclude" #>
<#@ include file="ServiceRegistrationTemplate.ttinclude" #>
<#@ include file="StateMachineTemplate.ttinclude" #>
<#@ include file="EFContextTemplate.ttinclude" #>
<#@ include file="MongoDbBasedServiceTemplate.ttinclude" #>


<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Serialization" #>

<#@ output extension=".cs" #>
using System.Linq;
using Microsoft.Practices.Unity;
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration.Conventions;
using System;
using System.Collections.Generic;
using A.Core.Interface;

	
//<#= ServiceTemplateConfig.InterfacesProjectList[0] #>
<#
	foreach(var modelProject in ServiceTemplateConfig.ModelProjectList)
    {
#>
using <#= modelProject #>;
using <#= modelProject #>.Requests;
<#
    }
#>


<# ServiceHelper helper = new ServiceHelper(VisualStudioHelper, ServiceTemplateConfig); #>
<# 

	string @namespace = VisualStudioHelper.CurrentProject.Properties.Item("DefaultNamespace").Value.ToString();
	//write namespace and add all classes to it
	PopIndent();
	WriteLine(string.Format(@"namespace {0} 
	{{ ", @namespace));
	PushIndent("\t");
	var interfaceList = helper.GetInterfaceList();

	ServiceRegistrationTemplate registrationTemplate = new ServiceRegistrationTemplate(interfaceList);
	WriteLine(registrationTemplate.TransformText());

	var eFBasedInterfaceList = helper.GetInterfaceList("DefaultImplementationEnum.EntityFramework");
	if(eFBasedInterfaceList.Count > 0)
    {
		EFContextTemplate contextTemplate = new EFContextTemplate(ServiceTemplateConfig, VisualStudioHelper);
		WriteLine(contextTemplate.TransformText());

		EFBasedServiceTemplate template = new EFBasedServiceTemplate(ServiceTemplateConfig.ContextName, VisualStudioHelper,eFBasedInterfaceList, helper);
		WriteLine(template.TransformText());
    }

	var mongoDbBasedInterfaceList = helper.GetInterfaceList("DefaultImplementationEnum.MongoDB");
	if(mongoDbBasedInterfaceList.Count > 0)
    {
		MongoDbBasedServiceTemplate mongoTemplate = new MongoDbBasedServiceTemplate(ServiceTemplateConfig.DatabaseName, ServiceTemplateConfig.ConnectionStringName, VisualStudioHelper,mongoDbBasedInterfaceList, helper);
		WriteLine(mongoTemplate.TransformText());
    }
	
	
	StateMachineTemplate stateMachineTemplate = new StateMachineTemplate(interfaceList, ServiceTemplateConfig, VisualStudioHelper);
	WriteLine(stateMachineTemplate.TransformText());

	PopIndent();
//end of namespace
WriteLine("}");
#>
<#+ 
	public class ServiceHelper
	{
        public string DefaultServiceBehaviourAttribute = "A.Core.Attributes.DefaultServiceBehaviourAttribute";
		public ServiceHelper(AutomationHelper helper, ServiceTemplateConfig config)
        {
			VisualStudioHelper = helper;
			ServiceTemplateConfig = config;
        }
		public AutomationHelper VisualStudioHelper { get; set; }
		public ServiceTemplateConfig ServiceTemplateConfig { get; set; }

		public IList<EnvDTE.CodeInterface> GetInterfaceList(string behaviour = null)
        {
			IList<EnvDTE.CodeInterface> interfaceList = new List<EnvDTE.CodeInterface>();
			IList<EnvDTE.Project> projectList = new List<EnvDTE.Project>();
			
			if(ServiceTemplateConfig.InterfacesProjectList.Count > 0)
            {
				foreach(var projectName in ServiceTemplateConfig.InterfacesProjectList)
                {
					var project = VisualStudioHelper.GetProject(projectName);
					projectList.Add(project);
                }
            }

			foreach(var project in projectList)
            {
				string @namespace = project.Properties.Item("DefaultNamespace").Value.ToString();
				var allInterfaces = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(project.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementInterface, false, @namespace);
				System.Diagnostics.Debug.WriteLine("//Getting all interfaces:" ); 
				foreach(EnvDTE80.CodeInterface2 entity in allInterfaces)
				{
					foreach(var part in entity.Parts)
                    {
						System.Diagnostics.Debug.WriteLine("//Interface parts: " +entity.FullName); 
						var allAttributes = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(((CodeType)part).Attributes, vsCMElement.vsCMElementAttribute, false);
						 if (allAttributes.OfType<EnvDTE.CodeAttribute>()
									 .Any(att => att.FullName == DefaultServiceBehaviourAttribute))
						{
							if(behaviour == null)
                            {
								interfaceList.Add(entity);
                            }
							else
                            {
								foreach(var attr in allAttributes)
                                {
									string val = ((CodeAttribute)attr).Value;
									if(attr.FullName == DefaultServiceBehaviourAttribute
										&& val.Contains(behaviour))
                                    {
										interfaceList.Add(entity);
                                    }
                                }
                            }
						}
                    }
				}
            }

			return interfaceList;
        }

		public bool IsIReadServiceInterface(EnvDTE.CodeInterface entity)
        {
		    bool isValid = false;
			var baseInterfaces = VisualStudioHelper.CodeModel.GetBaseInterfaces(entity);
			foreach(var baseInterface in baseInterfaces)
            {
				if(baseInterface.Name == "IReadService")
                {
					isValid = true;
                }
				else if(baseInterface.Name == "ICRUDService")
                {
					//if service also implements ICRUDService, it will be implemented in second method
					isValid = false;
					break;
                }
            }
			return isValid;
        }

		public bool IsICRUDServiceInterface(EnvDTE.CodeInterface entity)
        {
		    bool isValid = false;
			var baseInterfaces = VisualStudioHelper.CodeModel.GetBaseInterfaces(entity);
			foreach(var baseInterface in baseInterfaces)
            {
				if(baseInterface.Name == "ICRUDService")
                {
					isValid = true;
					break;
                }
            }
			return isValid;
        }
	}
#>