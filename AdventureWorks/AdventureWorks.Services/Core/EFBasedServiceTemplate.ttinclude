<#@ assembly name="System.Core" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Threading.Tasks" #>


<#+
public class EFBasedServiceTemplate : TextTransformation
{
	public string FilterAttributeFullName = "A.Core.Attributes.FilterAttribute";
	public string LazyLoadingAttributeFullName = "A.Core.Attributes.LazyLoadingAttribute";
	public string DefaultMethodBehaviourAttribute = "A.Core.Attributes.DefaultMethodBehaviourAttribute";
	public string KeyAttributeFullName = "System.ComponentModel.DataAnnotations.KeyAttribute";

	public EFBasedServiceTemplate(string contextName, AutomationHelper helper, IList<CodeInterface> interfaceList, ServiceHelper serviceHelper )
    {
		ContextName = contextName;
		VisualStudioHelper = helper;
		InterfaceList = interfaceList;
		Helper =  serviceHelper;

    }

	IEnumerable<EnvDTE.CodeInterface> baseInterfacesForCurrentEntity = null;
	public IEnumerable<EnvDTE.CodeInterface> BaseInterfacesForCurrentEntity
    {
		get
		{
			if(baseInterfacesForCurrentEntity == null)
            {
				baseInterfacesForCurrentEntity = VisualStudioHelper.CodeModel.GetAllBaseInterfaces(Entity);
            }
			return baseInterfacesForCurrentEntity;
        }
		set
        {
			baseInterfacesForCurrentEntity = value;
        }
    }

	IEnumerable<EnvDTE.CodeClass> allClasses = null;
	public string GetBaseClassName()
    {
		string baseclassName = "BaseEFBasedReadService";
		if(BaseInterface == "ICRUDService")
        {
			baseclassName = "BaseEFBasedCRUDService";
        }
		var project = this.VisualStudioHelper.CurrentProject;
		if(allClasses == null)
        {
			string @namespace = project.Properties.Item("DefaultNamespace").Value.ToString();
			allClasses = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(project.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementClass, false, @namespace).OfType<EnvDTE.CodeClass>();
        }

		foreach(EnvDTE.CodeClass entity in allClasses)
		{
			if(entity.Name == baseclassName)
			{
				var baseInterfaces = BaseInterfacesForCurrentEntity;//VisualStudioHelper.CodeModel.GetAllBaseInterfaces(Entity);
				foreach(var i in baseInterfaces)
                {
					if(i.Name == BaseInterface)
                    {
						string genericArgs = i.FullName.Substring(i.FullName.IndexOf('<'));
						return entity.Namespace.FullName + "." + entity.Name + genericArgs.Replace(">", ", " + ContextName + ">");
                    }
                }
				//return entity.FullName;//.Replace("TEntity",Entity.FullName);
			}
		}

		throw new Exception("Can't find base class");
    }

	public AutomationHelper VisualStudioHelper { get; set; }

    public string ClassName {get; set;}
    public EnvDTE.CodeInterface Entity { get; set; }
	public string BaseInterface {get; set;}
	public string ContextName {get; set;}
	public IList<CodeInterface> InterfaceList {get; set;}
	public ServiceHelper Helper {get; set;}

	public bool IsOperatorExisting(EnvDTE.CodeProperty property, string operatorName)
    {
		bool isExisting = false;
		var allAttributes = property.Attributes;//VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(property.Attributes, vsCMElement.vsCMElementAttribute, false);
		foreach(EnvDTE.CodeAttribute attribute in allAttributes)
                    {
						if(attribute.FullName == FilterAttributeFullName)
                        {
							string[] arguments = attribute.Value.Split(',');
							string[] operators = arguments[0].Trim().Split('|');
							foreach(string op in operators)
                            {
							
								if(op.Trim()==operatorName)
								{
									isExisting = true;
                                }
                            }
                        }
                    }
		return isExisting;
    }

	public void GenerateIncludeList()
	{
		var baseInterfaces = BaseInterfacesForCurrentEntity;//VisualStudioHelper.CodeModel.GetAllBaseInterfaces(Entity);
		foreach(var i in baseInterfaces)
		{
			if(i.Name == "IReadService" || i.Name == "ICRUDService")
			{
				string firstArgument = i.FullName.Split('<', '>')[1];
				string entityName = firstArgument.Split(',')[0];
				string searchObjectName = firstArgument.Split(',')[1];
				string additionalSearchObjectName = firstArgument.Split(',')[2];
				//var entityFromBaseClass = VisualStudioHelper.CodeModel.FindClass(entityName);
				var searchObjectFromBaseClass = VisualStudioHelper.CodeModel.FindCodeType(searchObjectName);//VisualStudioHelper.CodeModel.FindClass(searchObjectName);
				var additionalSearchObjectFromBaseClass = VisualStudioHelper.CodeModel.FindCodeType(additionalSearchObjectName);
				//WriteLine(searchObjectFromBaseClass.FullName);
				//foreach property in search object
				string keyPropertyName = null;
				string keyPropertyType = null;
				StringBuilder includeBuilder = new StringBuilder();
				EnvDTE80.CodeClass2 searchExtended = (EnvDTE80.CodeClass2)searchObjectFromBaseClass;

				foreach(var part in searchExtended.Parts)
				{
					var allPropertiesOnSearchObject = VisualStudioHelper.CodeModel.GetAllCodeElementsOfTypeNonRecursive(((EnvDTE80.CodeClass2)part).Members, EnvDTE.vsCMElement.vsCMElementProperty);//.OfType<EnvDTE.CodeProperty>();
					foreach(EnvDTE.CodeProperty property in allPropertiesOnSearchObject)
					{
						string propertyName = property.Name;
						WriteLine("//PropertyName: " + propertyName);
						var allAttributes = property.Attributes;//VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(property.Attributes, vsCMElement.vsCMElementAttribute, false).OfType<EnvDTE.CodeAttribute>();
						foreach(EnvDTE.CodeAttribute attr in allAttributes)
						{
							if(attr.FullName == KeyAttributeFullName)
							{
								//keyLoaded = true;
								keyPropertyName = property.Name;
								keyPropertyType = property.Type.AsFullName;
								break;
							}
						}
					}
				}
				
				var allPropertiesOnAdditionalSearchObject = VisualStudioHelper.CodeModel.GetAllCodeElementsOfTypeNonRecursive(additionalSearchObjectFromBaseClass.Members, EnvDTE.vsCMElement.vsCMElementProperty);//.OfType<EnvDTE.CodeProperty>();
				foreach(EnvDTE.CodeProperty property in allPropertiesOnAdditionalSearchObject)
                {
						var allAttributes = property.Attributes;//VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(property.Attributes, vsCMElement.vsCMElementAttribute, false).OfType<EnvDTE.CodeAttribute>();
						foreach(EnvDTE.CodeAttribute attr in allAttributes)
						{
							if(attr.FullName == LazyLoadingAttributeFullName)
							{
								//includeLoaded = true;
								includeBuilder.AppendFormat(@"if(search.{0}.HasValue && search.{0} == true)
								{{
									search.IncludeList.Add(""{1}"");
								}}",property.Name, property.Name.Substring(2, property.Name.Length - 16));
								
								
							}
							if(attr.FullName == KeyAttributeFullName)
							{
								//keyLoaded = true;
								keyPropertyName = property.Name;
								keyPropertyType = property.Type.AsFullName;
							}
						}
				}

				WriteLine(string.Format(
				@"
					partial void OnGetIncludeList({0} search);
					protected override IList<string> GetIncludeList({0} search)
					{{
						{2}
						OnGetIncludeList(search);
						return base.GetIncludeList(search);
					}}
				", additionalSearchObjectName, entityName, includeBuilder));


				WriteLine(string.Format(
				@"
					public override {1} Get(object id, {0} additionalData = null)
					{{
							if (additionalData != null)
                            {{
                                var count = GetIncludeList(additionalData).Count;
                                if (count > 0)
                                {{
                                    {2} search = new {2}();
                                    search.{3} = ({4})id;
									search.AdditionalData = additionalData;
                                    return Get(search).FirstOrDefault();
                                }}
                            }}
						return base.Get(id, additionalData);
					}}
				", additionalSearchObjectName, entityName, searchObjectName, keyPropertyName, keyPropertyType));

				break; //only one is enough
			}
		}
		
	}

	

	public void GenerateAddFilterFromDesigner()
	{
		System.Diagnostics.Stopwatch watch = new System.Diagnostics.Stopwatch();
		watch.Start();
		var baseInterfaces = BaseInterfacesForCurrentEntity;//VisualStudioHelper.CodeModel.GetAllBaseInterfaces(Entity);
		WriteLine("//ElapsedEFSingle Get base interfaces: " + ClassName + ":" + watch.ElapsedMilliseconds);
		watch.Restart();
		foreach(var i in baseInterfaces)
		{
			if(i.Name == "IReadService" || i.Name == "ICRUDService")
			{
				string firstArgument = i.FullName.Split('<', '>')[1];
				string entityName = firstArgument.Split(',')[0];
				string searchObjectName = firstArgument.Split(',')[1];
				//var entityFromBaseClass = VisualStudioHelper.CodeModel.FindClass(entityName);
				var searchObjectFromBaseClass = VisualStudioHelper.CodeModel.FindCodeType(searchObjectName);//VisualStudioHelper.CodeModel.FindClass(searchObjectName);
				//WriteLine(entityFromBaseClass.FullName);
				//foreach property in search object
				EnvDTE80.CodeClass2 searchExtended = (EnvDTE80.CodeClass2)searchObjectFromBaseClass;
				List<EnvDTE.CodeElement> allPropertiesOnSearchObject = new List<EnvDTE.CodeElement>();

				foreach(var part in searchExtended.Parts)
				{
					var propertiesOnSearchObject = VisualStudioHelper.CodeModel.GetAllCodeElementsOfTypeNonRecursive(((EnvDTE80.CodeClass2)part).Members, EnvDTE.vsCMElement.vsCMElementProperty);//.OfType<EnvDTE.CodeProperty>();
					allPropertiesOnSearchObject.AddRange(propertiesOnSearchObject);
                }

				StringBuilder filterBuilder = new StringBuilder();
				//var allPropertiesOnSearchObject = VisualStudioHelper.CodeModel.GetAllCodeElementsOfTypeNonRecursive(searchObjectFromBaseClass.Members, EnvDTE.vsCMElement.vsCMElementProperty);//.OfType<EnvDTE.CodeProperty>();
				WriteLine("//ElapsedEFSingle Get allPropertiesOnSearchObject: " + ClassName + ":" + watch.ElapsedMilliseconds);
				watch.Restart();
		
				foreach(EnvDTE.CodeProperty property in allPropertiesOnSearchObject)
                {
					
					if(property.Type.CodeType.Name.ToLower() != "string")
					{
						if(IsOperatorExisting(property,"A.Core.Attributes.FilterEnum.Equal"))
						{
							string filter = string.Format("\tquery = query.Where(x => x.{0} == search.{1});", property.Name, property.Name);
							filterBuilder.AppendFormat(@"if(search.{0}.HasValue)
							{{
								{1}
							}}
							", property.Name, filter);
						}
						if(IsOperatorExisting(property,"A.Core.Attributes.FilterEnum.NotEqual"))
						{
							string filter = string.Format("query = query.Where(x => x.{0} != search.{1});\r\n", property.Name.Substring(0,property.Name.Length - 2), property.Name);
							filterBuilder.AppendFormat(@"if(search.{0}.HasValue)
							{{
								{1}
							}}
							", property.Name, filter);
						}
						if(IsOperatorExisting(property,"A.Core.Attributes.FilterEnum.Greater"))
						{
							string filter = string.Format("query = query.Where(x => x.{0} > search.{1});\r\n", property.Name.Substring(0,property.Name.Length - 2), property.Name);
							filterBuilder.AppendFormat(@"if(search.{0}.HasValue)
							{{
								{1}
							}}
							", property.Name, filter);
						}
						if(IsOperatorExisting(property,"A.Core.Attributes.FilterEnum.GreatherThanOrEqual"))
						{
							string filter = string.Format("query = query.Where(x => x.{0} >= search.{1});\r\n", property.Name.Substring(0,property.Name.Length - 3), property.Name);
							filterBuilder.AppendFormat(@"if(search.{0}.HasValue)
							{{
								{1}
							}}
							", property.Name, filter);
						}
						if(IsOperatorExisting(property,"A.Core.Attributes.FilterEnum.LowerThan"))
						{
							string filter = string.Format("query = query.Where(x => x.{0} < search.{1});\r\n", property.Name.Substring(0,property.Name.Length - 2), property.Name);
							filterBuilder.AppendFormat(@"if(search.{0}.HasValue)
							{{
								{1}
							}}
							", property.Name, filter);
						}
						if(IsOperatorExisting(property,"A.Core.Attributes.FilterEnum.LowerThanOrEqual"))
						{
							string filter = string.Format("query = query.Where(x => x.{0} <= search.{1});\r\n", property.Name.Substring(0,property.Name.Length - 3), property.Name);
							filterBuilder.AppendFormat(@"if(search.{0}.HasValue)
							{{
								{1}
							}}
							", property.Name, filter);
						}
					}
					else
					{
						if(IsOperatorExisting(property,"A.Core.Attributes.FilterEnum.Equal"))
						{
							string filter = string.Format("query = query.Where(x => x.{0} == search.{1});\r\n", property.Name, property.Name);
							filterBuilder.AppendFormat(@"if(!string.IsNullOrWhiteSpace(search.{0}))
							{{
								{1}
							}}
							", property.Name, filter);
						}
						if(IsOperatorExisting(property,"A.Core.Attributes.FilterEnum.NotEqual"))
						{
							string filter = string.Format("query = query.Where(x => x.{0} != search.{1});\r\n", property.Name.Substring(0,property.Name.Length - 2), property.Name);
							filterBuilder.AppendFormat(@"if(!string.IsNullOrWhiteSpace(search.{0}))
							{{
								{1}
							}}
							", property.Name, filter);
						}
						if(IsOperatorExisting(property,"A.Core.Attributes.FilterEnum.Greater"))
						{
							string filter = string.Format("query = query.Where(x => x.{0}.StartsWith(search.{1}));\r\n", property.Name.Substring(0,property.Name.Length - 2), property.Name);
							filterBuilder.AppendFormat(@"if(!string.IsNullOrWhiteSpace(search.{0}))
							{{
								{1}
							}}
							", property.Name, filter);
						}
						if(IsOperatorExisting(property,"A.Core.Attributes.FilterEnum.GreatherThanOrEqual"))
						{
							string filter = string.Format("query = query.Where(x => x.{0}.StartsWith(search.{1}));\r\n", property.Name.Substring(0,property.Name.Length - 3), property.Name);
							filterBuilder.AppendFormat(@"if(!string.IsNullOrWhiteSpace(search.{0}))
							{{
								{1}
							}}
							", property.Name, filter);
						}
						if(IsOperatorExisting(property,"A.Core.Attributes.FilterEnum.LowerThan"))
						{
							string filter = string.Format("query = query.Where(x => x.{0}.EndsWith(search.{1}));\r\n", property.Name.Substring(0,property.Name.Length - 2), property.Name);
							filterBuilder.AppendFormat(@"if(!string.IsNullOrWhiteSpace(search.{0}))
							{{
								{1}
							}}
							", property.Name, filter);
						}
						if(IsOperatorExisting(property,"A.Core.Attributes.FilterEnum.LowerThanOrEqual"))
						{
							string filter = string.Format("query = query.Where(x => x.{0}.EndsWith(search.{1}));\r\n", property.Name.Substring(0,property.Name.Length - 3), property.Name);
							filterBuilder.AppendFormat(@"if(!string.IsNullOrWhiteSpace(search.{0}))
							{{
								{1}
							}}
							", property.Name, filter);
						}
					}
					
					if(IsOperatorExisting(property,"A.Core.Attributes.FilterEnum.List"))
						{
							string filter = string.Format("query = query.Where(x => search.{1}.Contains(x.{0}));\r\n", property.Name.Substring(0,property.Name.Length - 4), property.Name);
							filterBuilder.AppendFormat(@"if(search.{0} != null && search.{0}.Count > 0)
							{{
								{1}
							}}
							", property.Name, filter);
							
						}
					
                }

				WriteLine(string.Format(
				@"
					protected override void AddFilterFromGeneratedCode({0} search, ref System.Linq.IQueryable<{1}> query)
					{{
						base.AddFilterFromGeneratedCode(search, ref query);
						{2}
					}}
				", searchObjectName, entityName, filterBuilder));

				break;
			}
		}
		
	}

    public override string TransformText()
    {
		foreach(var @interface in InterfaceList)
        {
			System.Diagnostics.Stopwatch watch = new System.Diagnostics.Stopwatch();
			watch.Start();
			string baseInterface = "IReadService";
			if(Helper.IsICRUDServiceInterface(@interface))
			{
				baseInterface = "ICRUDService";
			}
			Entity = @interface;
			ClassName =  @interface.Name.Substring(1);
			BaseInterface = baseInterface;
			BaseInterfacesForCurrentEntity = null;
#>
public partial class <#= ClassName #> : <#= GetBaseClassName()#>, <#=Entity.FullName#>
{

	<#+
			WriteLine("//ElapsedEFSingle getBaseClassName: " + ClassName + ":" + watch.ElapsedMilliseconds);
			watch.Restart();
			GenerateAddFilterFromDesigner();
			WriteLine("//ElapsedEFSingle filter for: " + ClassName + ":" + watch.ElapsedMilliseconds);
			watch.Restart();
			GenerateIncludeList();
			WriteLine("//ElapsedEFSingle include for: " + ClassName + ":" + watch.ElapsedMilliseconds);
			watch.Restart();
		List<string> StateMachines = new List<string>();
        var methods = VisualStudioHelper.CodeModel.GetAllMethodsOnInterface(Entity);
			WriteLine("//ElapsedEFSingle get methods for: " + ClassName + ":" + watch.ElapsedMilliseconds);
			watch.Restart();
		foreach(var method in methods)
			{
				EnvDTE.CodeAttribute defaultMethodBehaviour = null;
				var allAttributes = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(method.Attributes, vsCMElement.vsCMElementAttribute, false);//.OfType<EnvDTE.CodeAttribute>();
				foreach(EnvDTE.CodeAttribute attr in allAttributes)
                {
					if(attr.FullName == DefaultMethodBehaviourAttribute)
					{
						defaultMethodBehaviour = attr;
						break; 
					}
                }

				 if((method.Name == "Insert" && !method.FullName.Contains("ICRUDService"))
					 || (defaultMethodBehaviour != null && defaultMethodBehaviour.Value == "BehaviourEnum.Insert"))
				 {
					//TODO: Add this
					//render get by Id method
					//GenerateInsert(method);
				 }
				 if((method.Name == "Update" && !method.FullName.Contains("ICRUDService"))
					 || (defaultMethodBehaviour != null && defaultMethodBehaviour.Value == "BehaviourEnum.Update"))
				 {
					//TODO: Add this
					//render update by Id method
					//GenerateUpdate(method);
				 }				 

			}
	#>
}
<#+
			WriteLine("//ElapsedEFSingle for: " + ClassName + ":" + watch.ElapsedMilliseconds);
        }
		return this.GenerationEnvironment.ToString();
    }
}
#>