<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Xml" #>

<#+
        [XmlRoot(ElementName = "ArrayOfExtensiblePropertyInstance", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
        public class ArrayOfExtensiblePropertyInstance
        {
            [XmlAttribute(AttributeName = "xsi", Namespace = "http://www.w3.org/2000/xmlns/")]
            public string Xsi { get; set; }
            [XmlAttribute(AttributeName = "xsd", Namespace = "http://www.w3.org/2000/xmlns/")]
            public string Xsd { get; set; }
        }

        [XmlRoot(ElementName = "stateMoniker", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
        public class StateMoniker
        {
            [XmlAttribute(AttributeName = "name")]
            public string Name { get; set; }
        }

        [XmlRoot(ElementName = "flow", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
        public class Flow
        {
            [XmlElement(ElementName = "ArrayOfExtensiblePropertyInstance", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
            public ArrayOfExtensiblePropertyInstance ArrayOfExtensiblePropertyInstance { get; set; }
            [XmlElement(ElementName = "stateMoniker", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
            public StateMoniker StateMoniker { get; set; }
			[XmlAttribute(AttributeName = "guard")]
            public string Guard { get; set; }
            [XmlAttribute(AttributeName = "eventAndGuardLabel")]
            public string EventAndGuardLabel { get; set; }
            [XmlAttribute(AttributeName = "effectLabel")]
            public string EffectLabel { get; set; }
            [XmlAttribute(AttributeName = "eventGuardEffectLabel")]
            public string EventGuardEffectLabel { get; set; }
            [XmlElement(ElementName = "endPointMoniker", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
            public EndPointMoniker EndPointMoniker { get; set; }
        }

        [XmlRoot(ElementName = "flowTo", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
        public class FlowTo
        {
            [XmlElement(ElementName = "flow", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
            public List<Flow> Flow { get; set; }
        }

        [XmlRoot(ElementName = "startPoint", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
        public class StartPoint
        {
            [XmlElement(ElementName = "ArrayOfExtensiblePropertyInstance", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
            public ArrayOfExtensiblePropertyInstance ArrayOfExtensiblePropertyInstance { get; set; }
            [XmlElement(ElementName = "flowTo", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
            public FlowTo FlowTo { get; set; }
            [XmlAttribute(AttributeName = "name")]
            public string Name { get; set; }
        }

        [XmlRoot(ElementName = "state", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
        public class State
        {
            [XmlElement(ElementName = "ArrayOfExtensiblePropertyInstance", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
            public ArrayOfExtensiblePropertyInstance ArrayOfExtensiblePropertyInstance { get; set; }
            [XmlElement(ElementName = "flowTo", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
            public FlowTo FlowTo { get; set; }
            [XmlAttribute(AttributeName = "name")]
            public string Name { get; set; }
            [XmlAttribute(AttributeName = "entryActionLabel")]
            public string EntryActionLabel { get; set; }
            [XmlAttribute(AttributeName = "exitActionLabel")]
            public string ExitActionLabel { get; set; }
        }

        [XmlRoot(ElementName = "endPointMoniker", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
        public class EndPointMoniker
        {
            [XmlAttribute(AttributeName = "name")]
            public string Name { get; set; }
        }

        [XmlRoot(ElementName = "endPoint", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
        public class EndPoint
        {
            [XmlElement(ElementName = "ArrayOfExtensiblePropertyInstance", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
            public ArrayOfExtensiblePropertyInstance ArrayOfExtensiblePropertyInstance { get; set; }
            [XmlAttribute(AttributeName = "name")]
            public string Name { get; set; }
        }

        [XmlRoot(ElementName = "flowElements", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
        public class FlowElements
        {
            [XmlElement(ElementName = "startPoint", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
            public StartPoint StartPoint { get; set; }
            [XmlElement(ElementName = "state", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
            public List<State> State { get; set; }
            [XmlElement(ElementName = "endPoint", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
            public EndPoint EndPoint { get; set; }
        }

        [XmlRoot(ElementName = "stateGraph", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
        public class StateGraph
        {
            [XmlElement(ElementName = "flowElements", Namespace = "http://www.tangiblearchitect.com/dsltools/State")]
            public FlowElements FlowElements { get; set; }
            [XmlAttribute(AttributeName = "dm0", Namespace = "http://www.w3.org/2000/xmlns/")]
            public string Dm0 { get; set; }
            [XmlAttribute(AttributeName = "dslVersion")]
            public string DslVersion { get; set; }
            [XmlAttribute(AttributeName = "name")]
            public string Name { get; set; }
            [XmlAttribute(AttributeName = "xmlns")]
            public string Xmlns { get; set; }
			[XmlAttribute(AttributeName = "description")]
            public string Description { get; set; }
        }


public class StateMachineModelTemplate : TextTransformation
{
	public string StateMachineAttribute = "A.Core.Attributes.StateMachineAttribute";
	AutomationHelper VisualStudioHelper {get; set;}
	IEnumerable<EnvDTE.CodeClass> ClassList {get; set;}
	EnvDTE.CodeClass Class {get; set;}
	StateGraph CurrentStateGraph {get; set;}
	public StateMachineModelTemplate(IEnumerable<EnvDTE.CodeClass> classList, AutomationHelper helper)
	{
		VisualStudioHelper = helper;
		ClassList = classList;
		
	}
	/// <summary>
	/// Gets a list of all triggers in the diagram.
	/// </summary>
		List<string> GetGuardNames(StateGraph sg)
        {
            var ret = new List<string>();

            // iterate all states
            foreach (State s in sg.FlowElements.State)
            {
                if(s.FlowTo != null)
                {
                    // get all flows where s is the start point
                    foreach (Flow f in s.FlowTo.Flow)
                    {
						if(!string.IsNullOrWhiteSpace(f.Guard))
                        {
							string name = f.Guard.Replace("/","");
							if (!ret.Contains(name) && !string.IsNullOrEmpty(name))
                            {
								ret.Add(name);
                            }
                        }
                    }
                }
            }

            return ret;
        }

		List<string> GetGuardNamesForState(State s)
        {
            var ret = new List<string>();

			if(s.FlowTo != null)
			{
				// get all flows where s is the start point
				foreach (Flow f in s.FlowTo.Flow)
				{
					if(!string.IsNullOrWhiteSpace(f.Guard))
					{
						string name = f.Guard.Replace("/","");
						if (!ret.Contains(name) && !string.IsNullOrEmpty(name))
						{
							ret.Add(name);
						}
					}
				}
			}

            return ret;
        }

	public bool IsValidForCreatingStateMachine(EnvDTE.CodeClass @class)
    {
		bool isExisting = false;
		var allAttributes = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(@class.Attributes, vsCMElement.vsCMElementAttribute, false);
		foreach(EnvDTE.CodeAttribute attribute in allAttributes)
        {
			if(attribute.FullName == StateMachineAttribute)
            {
				isExisting = true;
				break;
            }
        }
		return isExisting;
    }

	public string GetStateMachineName()
    {
		var allAttributes = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(Class.Attributes, vsCMElement.vsCMElementAttribute, false);
		foreach(EnvDTE.CodeAttribute attribute in allAttributes)
        {
			if(attribute.FullName == StateMachineAttribute)
            {
				return attribute.Value.Split(',')[0].Trim().Trim('"');
            }
        }
		
		throw new Exception("State machine name not found on:" + Class.FullName);
    }

	public string GetNextStateName(State state, string flowName)
    {
        string nextStateName = "";
        if(state.FlowTo != null)
        {
            foreach(var currentFlow in state.FlowTo.Flow)
            {
                if(currentFlow != null && currentFlow.EventAndGuardLabel != null
					&& currentFlow.StateMoniker != null)
                {
                    if(currentFlow.EventAndGuardLabel.TrimEnd('/') == flowName)
                    {
						if(!string.IsNullOrWhiteSpace(CurrentStateGraph.Name))
                        {
							nextStateName = currentFlow.StateMoniker.Name.Remove(0, CurrentStateGraph.Name.Length + 1).TrimStart('/');
                        }
						else
                        {
							nextStateName = currentFlow.StateMoniker.Name.TrimStart('/');
						}
                        
                        break;
                    }
                }
            }
        }
        return nextStateName;
    }


    public override string TransformText()
    {
		WriteLine("//Creating requests for state machines");
		//we will first create for each state new class and state machine
		foreach(var @class in ClassList)
        {
			if(IsValidForCreatingStateMachine(@class))
            {
				Class = @class; //we will now proceed rendering based on this interface
				XmlSerializer ser = new XmlSerializer(typeof(StateGraph));
				string fileName = "";
				
				var project = VisualStudioHelper.CurrentProject;
        
				WriteLine("//file:"+project.FullName + "_" + System.IO.Path.GetDirectoryName(project.FullName));
				var files = Directory.EnumerateFiles(System.IO.Path.GetDirectoryName(project.FullName), GetStateMachineName() +".tastate", SearchOption.AllDirectories);
				if(files.Count() != 1)
				{
					continue;
				}
				foreach(var file in files)
				{
					fileName = file;
					break;
				}
				
				WriteLine("//Creating state machine from: "+fileName);
				using (XmlReader reader = XmlReader.Create(fileName))
				{
					CurrentStateGraph = (StateGraph)ser.Deserialize(reader);
				}
				var stateMachineName = GetStateMachineName();
#>
				//StateMachine: <#= Class.Name #>, name: <#= GetStateMachineName() #>, graphCount <#= CurrentStateGraph.FlowElements.State.Count #>

<#+				
				foreach(var triggerName in GetGuardNames(this.CurrentStateGraph))
				{
#>
				public partial class <#= Class.Name + triggerName #>Request { }	

<#+ 
                }
#>
<#+				
				foreach(var startFlow in CurrentStateGraph.FlowElements.StartPoint.FlowTo.Flow)
				{
#>
					public partial class <#= Class.Name + startFlow.Guard #>Request { }	
<#+ 
                }
#>

				public enum <#= Class.Name #>TriggerEnum
				{
<#+				
				foreach(var triggerName in GetGuardNames(this.CurrentStateGraph))
				{
#>
				 <#= Class.Name + triggerName #>Request,

<#+ 
                }
#>
<#+				
				foreach(var startFlow in CurrentStateGraph.FlowElements.StartPoint.FlowTo.Flow)
				{
#>
					<#= Class.Name + startFlow.Guard #>Request,
<#+ 
                }
#>
				}

<#+
            }
        }
		return this.GenerationEnvironment.ToString();
    }
}
#>
